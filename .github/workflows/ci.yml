name: Foosta-CI

on:
    push:
        branches: [ master ]
    pull_request:
        branches: [ master ]

jobs:
    pep8:
        runs-on: ubuntu-20.04

        steps:
        - uses: actions/checkout@v2

        - name: Install-Python-requirements
          run: |
              sudo apt-get install -y python3-pip
              pip3 install -r backend/requirements.txt
              pip3 install -r backend/test-requirements.txt

        - name: Run-checks
          run: |
              source foosta.env

              # Using two separate commands for pylint in order to exclude
              # messages like "Similar lines in 2 files".
              # Yes, there are similar lines in `db/` and `backend/`, and it's
              # expected because `db/` is a kinda standalone package.
              pylint -j8 --rcfile=pep8/pylintrc -sn db/
              pylint -j8 --rcfile=pep8/pylintrc -sn backend/

              flake8 -j8 --config=pep8/flake8 db/
              flake8 -j8 --config=pep8/flake8 backend/


    eslint:
        runs-on: ubuntu-20.04

        steps:
        - uses: actions/checkout@v2

        - name: Install UI
          run: |
              yarn --cwd=ui/react_app/ install

        - name: Run-eslint
          run: |
              yarn --cwd=ui/react_app/ run eslint src/ --ext=jsx --max-warnings=0


    db-tests:
        runs-on: ubuntu-20.04

        steps:
        - uses: actions/checkout@v2

        - name: Install-Postgres
          run: |
              sudo apt-get install postgresql
              sudo systemctl start postgresql.service

        - name: Fill-out-database
          run: |
              # Configure password.
              mkdir /tmp/foosta_shared
              echo '"db-pass"' > db/shared/password_db.json
              echo '"db-pass"' > /tmp/foosta_shared/password_db.json
              
              cp -r db/initdb_scripts /tmp
              
              # Create role and tables.
              sudo -u postgres psql -af /tmp/initdb_scripts/01-create-database.sql
              sudo -u postgres psql "host=localhost port=5432 dbname=foostadb user=foostauser password=db-pass" -af /tmp/initdb_scripts/02-create-tables.sql

        - name: Install-Python-requirements
          run: |
              sudo apt-get install -y python3-pip
              pip3 install -r db/test-requirements.txt

        - name: Run-tests
          run: |
              source foosta.env
              pytest --disable-warnings db/


    backend-tests:
        runs-on: ubuntu-20.04

        steps:
        - uses: actions/checkout@v2

        - name: Install-Postgres
          run: |
              sudo apt-get install postgresql
              sudo systemctl start postgresql.service

        - name: Fill-out-database
          run: |
              # Configure DB password.
              mkdir /tmp/foosta_shared
              echo '"db-pass"' > /tmp/foosta_shared/password_db.json

              cp -r db/initdb_scripts /tmp
              
              # Create role and tables.
              sudo -u postgres psql -af /tmp/initdb_scripts/01-create-database.sql
              sudo -u postgres psql "host=localhost port=5432 dbname=foostadb user=foostauser password=db-pass" -af /tmp/initdb_scripts/02-create-tables.sql

        - name: Install-Python-requirements
          run: |
              sudo apt-get install -y python3-pip
              pip3 install -r backend/requirements.txt
              pip3 install -r backend/test-requirements.txt

        - name: Run-tests
          run: |
              source foosta.env
              pytest --disable-warnings backend/


    deploy-tests:
        runs-on: ubuntu-20.04

        steps:
        - uses: actions/checkout@v2

        - name: Deploy-Project
          run: |
              # Configure DB password.
              mkdir /tmp/foosta_shared
              echo '"s3e-db"' > db/shared/password_db.json
              cp db/shared/password_db.json backend/flask_app/foosta/password_db.json

              # Set backend password.
              echo '"smoke-t2t"' > backend/flask_app/foosta/password_backend.json

              # Deploy.
              ./deploy/build_all.sh

        - name: Install-test-requirements
          run: |
              sudo apt-get install chromium-chromedriver -y
              pip3 install -r deploy/requirements.txt

        - name: Smoke-test
          run: |
              ./deploy/smoke_test.sh
